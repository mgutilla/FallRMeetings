.C("foo", n=as.integer(5), x=as.double(c(1:5)))
.C("foo", n=as.integer(5), x=as.double(c(1:6)))
.C("foo", n=as.integer(6), x=as.double(c(1:6)))
foo <- function(x) {
if (!is.numeric(x))
stop("argument x must be numeric")
out <- .C("foo",
n=as.integer(length(x)),
x=as.double(x))
return(out$x)
}
foo(c(1:5))
dyn.load("bar.so")
.Fortran("bar", n=as.integer(5), x=as.double(rnorm(5)))
library(lme4)
data(Dyestuff)
?Dyestuff
head(Dyestuff)
library(ggplot2)
qplot(Dyestuff, aes(x = Yield), geom = "histogram")
fme1 <- lmer(Yield ~ 1 + (1 | Batch), Dyestuff)
print(fme1)
df <- data.frame(subj = rep(1:36, each = 8),
HR = rnorm(36 * 8),
VE = rnorm(36 * 8))
head(df)
subjects <- unique(df$subj)
df <- data.frame(subj = as.factor(rep(1:36, each = 8)),
HR = rnorm(36 * 8),
VE = rnorm(36 * 8))
subjects <- unique(df$subj)
for(i in 1:)
subjects
i <- 1
subj <- subset(df, subj == subjects[i])
subj
plots <- list()
?geom_point
df <- data.frame(subj = as.factor(rep(1:36, each = 8)),
HR = rnorm(36 * 8),
VE = rnorm(36 * 8))
subjects <- unique(df$subj)
plots <- list()
for(i in 1:length(subjects)){
subj <- subset(df, subj == subjects[i])
plots[[i]] <- ggplot(subj, aes(x = HR, y = VE)) +
geom_point()
}
print(plots[[1]])
print(plots[[2]])
print(plots[[2]])
install.packages("gridExtra")
library(gridExtra)
grid.arrange(plots, ncol = 6)
?grid.arrange
do.call(grid.arrange, plots)
getwd()
pdf("SubjectPlot.pdf", height = 10, width = 10)
do.call(grid.arrange, plots)
dev.off()
?grid.arrange
pdf("SubjectPlot.pdf", height = 10, width = 10)
do.call(grid.arrange, plots,
main = "Subject-specific relationships") ## I'm adding a main
## title to the plot
dev.off()
pdf("SubjectPlot.pdf", height = 10, width = 10)
do.call(grid.arrange, plots,
main = "Subject-specific relationships") ## I'm adding a main
## title to the plot
dev.off()
?grid.arrange
pdf("SubjectPlot.pdf", height = 10, width = 10)
do.call(grid.arrange, plots)
dev.off()
ggplot(df, aes(x = HR, y = VE)) + geom_point() +
geom_smooth(method = "lm")
ggplot(df, aes(x = HR, y = VE)) + geom_point() +
geom_smooth(method = "lm") +
facet_grid(. ~ subj)
?facet_grid
ggplot(df, aes(x = HR, y = VE)) + geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ subj, ncol = 6)
alpha <- .1; m <- 10; n <- 10
N <- 10000
n.reject <- 0
t.statistic <- function(x, y){
m <- length(x)
n <- length(y)
sp <- sqrt(((m - 1) * sd(x) ^ 2 + (n - 1) * sd(y)^2)/(m + n - 2))
t <- (mean(x) - mean(y)) / (sp * sqrt(1 / m + 1 / n))
return(t)
}
alpha <- .1; m <- 10; n <- 10
N <- 10000
n.reject <- 0
for (i in 1:N){
x <- rnorm(m, mean = 0, sd = 1)
y <- rnorm(n, mean = 0, sd = 1)
t <- tstatistic(x, y)
if(abs(t) > qt(1 - alpha / 2, n + m - 2)){
n.reject <- n.reject + 1
}
}
true.sig.level <- n.reject / N
tstatistic <- function(x, y){
m <- length(x)
n <- length(y)
sp <- sqrt(((m - 1) * sd(x) ^ 2 + (n - 1) * sd(y)^2)/(m + n - 2))
t <- (mean(x) - mean(y)) / (sp * sqrt(1 / m + 1 / n))
return(t)
}
alpha <- .1; m <- 10; n <- 10
N <- 10000
n.reject <- 0
for (i in 1:N){
x <- rnorm(m, mean = 0, sd = 1)
y <- rnorm(n, mean = 0, sd = 1)
t <- tstatistic(x, y)
if(abs(t) > qt(1 - alpha / 2, n + m - 2)){
n.reject <- n.reject + 1
}
}
true.sig.level <- n.reject / N
true.sig.level
i <- 1
x <- rnorm(m, mean = 0, sd = 1)
y <- rnorm(n, mean = 0, sd = 1)
x
y
t
qt(1 - alpha / 2, n + m - 2)
n.reject
N
true.sig.level
alpha <- .1; m <- 10; n <- 10
N <- 10000
n.reject <- 0
for (i in 1:N){
x <- rnorm(m, mean = 0, sd = 1)
y <- rnorm(n, mean = 0, sd = 10)
t <- tstatistic(x, y)
if(abs(t) > qt(1 - alpha / 2, n + m - 2)){
n.reject <- n.reject + 1
}
}
(true.sig.level <- n.reject / N)
rt(10, df = 4)
alpha <- .1; m <- 10; n <- 10
N <- 10000
n.reject <- 0
for (i in 1:N){
x <- rexp(m, rate = 1)
y <- rexp(n, rate = 1)
t <- tstatistic(x, y)
if(abs(t) > qt(1 - alpha / 2, n + m - 2)){
n.reject <- n.reject + 1
}
}
(true.sig.level <- n.reject / N)
alpha <- .1; m <- 10; n <- 10
N <- 10000
n.reject <- 0
for (i in 1:N){
x <- rexp(m, rate = 1)
y <- rexp(n, rate = 1)
t <- tstatistic(x, y)
if(abs(t) > qt(1 - alpha / 2, n + m - 2)){
n.reject <- n.reject + 1
}
}
(true.sig.level <- n.reject / N)
11 / 27
p <- seq(.05, .95, by = .1)
prior <- c(2, 4, 8, 8, 4, 2, 1, 1, 1, 1)
p * prior
sum(p * prior)
sum(p * prior) / sum(prior)
prior <- prior / sum(prior)
prior
sum(p * prior)
plot(p, prior, type = "h")
data <- c(11, 16)
27 - 11
library(LearnBayes)
p
prior
?pdisc
post <- pdisc(p, prior, data)
post
plot(p, post, type = "h")
prior[1]
p[1]
(p[1] ^ 11) * ((1 - p[1]) ^ 16)
p <- seq(0, 1, length = 500)
a <- 3.4
b <- 7.4
s <- 11
f <- 16
prior <- dbeta(p, a, b)
like <- dbeta(p, s + 1, f + 1)
post <- dbeta(p, a + s, b + f)
plot(p, post, type = "l", lty = 2, lwd = 3)
lines(p, like, lty = 1, lwd = 3)
lines(p, prior, lty = 3, lwd = 3)
pbeta(.5, a + s, b + f)
1 - pbeta(.5, a + s, b + f)
qbeta(c(.05, .95), a + s, b + f)
ps <- rbeta(1000, a + s, b + f)
hist(ps, xlab = "p", main = "")
sum(ps >= .5) / 1000
quantile(ps, c(.05, .95))
midpt <- seq(0.05, 0,.95, by = .1)
prior <- c(2, 4, 8, 8, 4, 2, 1, 1, 1, 1)
prior <- prior / sum(prior)
p <- seq(0, 1, length = 500)
midpt <- seq(0.05, 0.95, by = .1)
plot(p, histprior(p, midpt, prior), type = "l", ylim = c(0, .25))
?histprior
like <- dbeta(p, s + 1, f + 1)
post <- like * histprior(p, midpt, prior)
plot(p, post, type = "l")
post <- post / sum(post)
plot(p, post, type = "l")
ps <- sample(p, replace = TRUE, prob = post)
hist(ps, xlab = "p")
p <- seq(.05, .95, by = .1)
prior <- c(2, 4, 8, 8, 4, 2, 1, 1, 1, 1)
prior <- prior / sum(prior)
m <- 20
ys <- 0:20
pred <- pdiscp(p, prior, m, ys)
pred
plot(0:20, pred)
p <- rbeta(1000, 3.4, 7.4)
p
y <- rbinom(1000, 20, p)
head(y)
hist(y)
table(y)
p <- c(0, .125, .250, .375, .500, .625, .750, .875, 1)
prior <- c(.001, .001, .950, .008, .008, .008, .008, .008, .008)
p <- c(0, .125, .250, .375, .500, .625, .750, .875, 1)
plot(p, prior, type = "h")
s <- 6
f <- 4
data <- c(6, 4)
cbind(p, prior, post)
p <- c(0, .125, .250, .375, .500, .625, .750, .875, 1)
prior <- c(.001, .001, .950, .008, .008, .008, .008, .008, .008)
s <- 6
f <- 4
data <- c(6, 4)
cbind(p, prior, post)
post <- pdisc(p, prior, data)
post
plot(p, post, type = "h")
mean(post * p)
post * p
sum(post * p)
library(ggplot2)
?geom_polygon
# setwd("/Users/brookeanderson/Documents/Hopkins\ Postdoc/cvdhosp/Package")
county.locs <- read.csv("~/Documents/Hopkins Postdoc/hurricanes/DetermineCountyStormDates/CenPop2010_Mean_CO.txt",
skip = 2, header = TRUE,
colClasses = c(rep("character", 4), rep("numeric", 3)))
county.locs$fips <- paste0(county.locs$STATEFP, county.locs$COUNTYFP)
load("countyIDs.RData")
county.locs <- subset(county.locs, fips %in% countyIDs$fips)
load("YearlyAveStudyPopByCounty.RData")
ave.yearly <- subset(ave.yearly, select = c("fips", "total.ave"))
county.locs <- merge(county.locs, ave.yearly, by = "fips")
library(maps)
library(ggplot2)
library(scales)
all_states <- map_data("state")
p <- ggplot()
p <- p + geom_polygon(data = all_states,
aes(x = long, y = lat, group = group),
colour = "white", fill = "lightgray")
p <- p + geom_point(data = county.locs,
aes(x = LONGITUDE, y = LATITUDE, size = total.ave),
alpha = 0.7) +
scale_size_continuous(name = "Study\npopulation", labels = comma)
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank()) +
xlab("") + ylab("")
print(p)
northeast <- subset(all_states, region %in% c("maine", "vermont", "new hampshire"))
p + geom_polygon(data = northeast, aes(x = long, y = lat, group = group),
colour = "black", fill = NA)
setwd("/Users/brookeanderson/Documents/Hopkins\ Postdoc/cvdhosp/Package")
county.locs <- read.csv("~/Documents/Hopkins Postdoc/hurricanes/DetermineCountyStormDates/CenPop2010_Mean_CO.txt",
skip = 2, header = TRUE,
colClasses = c(rep("character", 4), rep("numeric", 3)))
county.locs$fips <- paste0(county.locs$STATEFP, county.locs$COUNTYFP)
load("countyIDs.RData")
county.locs <- subset(county.locs, fips %in% countyIDs$fips)
load("YearlyAveStudyPopByCounty.RData")
ave.yearly <- subset(ave.yearly, select = c("fips", "total.ave"))
county.locs <- merge(county.locs, ave.yearly, by = "fips")
library(maps)
library(ggplot2)
library(scales)
all_states <- map_data("state")
p <- ggplot()
p <- p + geom_polygon(data = all_states,
aes(x = long, y = lat, group = group),
colour = "white", fill = "lightgray")
p <- p + geom_point(data = county.locs,
aes(x = LONGITUDE, y = LATITUDE, size = total.ave),
alpha = 0.7) +
scale_size_continuous(name = "Study\npopulation", labels = comma)
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank()) +
xlab("") + ylab("")
print(p)
northeast <- subset(all_states, region %in% c("maine", "vermont", "new hampshire"))
p + geom_polygon(data = northeast, aes(x = long, y = lat, group = group),
colour = "black", fill = NA)
northeast <- subset(all_states, region %in% c("maine", "vermont", "new hampshire",
"new york", "massachucetts"))
p + geom_polygon(data = northeast, aes(x = long, y = lat, group = group),
colour = "black", fill = NA)
?map_data
northeast <- map_data("state", region = c("maine", "vermont", "new hampshire",
"new york", "rhode island"))
p + geom_polygon(data = northeast, aes(x = long, y = lat, group = group),
colour = "black", fill = NA)
northeast <- map_data("state", region = c("maine", "vermont", "new hampshire",
"new york", "rhode island"),
interior = FALSE)
p + geom_polygon(data = northeast, aes(x = long, y = lat, group = group),
colour = "black", fill = NA)
?map_data
?map_data
northeast <- map_data("state", region = c("maine", "vermont", "new hampshire",
"new york", "rhode island"),
interior = FALSE)
p + geom_polygon(data = northeast, aes(x = long, y = lat, group = group),
colour = "black", fill = NA, interior = FALSE)
?map_data
northeast <- map("state", region = c("maine", "vermont", "new hampshire",
"new york", "rhode island"),
interior = FALSE, plot = FALSE)
p + geom_polygon(data = northeast, aes(x = long, y = lat, group = group),
colour = "black", fill = NA)
northeast <- map_data("state", region = c("maine", "vermont", "new hampshire",
"new york", "rhode island"),
interior = FALSE, boundary = FALSE)
p + geom_polygon(data = northeast, aes(x = long, y = lat, group = group),
colour = "black", fill = NA)
northeast <- map_data("state", region = c("maine", "vermont", "new hampshire",
"new york", "rhode island"),
interior = FALSE, boundary = FALSE)
p + geom_path(data = northeast, aes(x = long, y = lat, group = group),
colour = "black")
p
pdf("StudyCountiesMap.pdf", width = 6, height = 4)
print(p)
dev.off()
pdf("StudyCountiesMap.pdf", width = 6, height = 3.5)
print(p)
dev.off()
pdf("StudyCountiesMap.pdf", width = 7, height = 3.5)
print(p)
dev.off()
p <- ggplot()
p <- p + geom_polygon(data = all_states,
aes(x = long, y = lat, group = group),
colour = "white", fill = "lightgray")
p <- p + geom_point(data = county.locs,
aes(x = LONGITUDE, y = LATITUDE, size = total.ave),
alpha = 0.5) +
scale_size_continuous(name = "Study\npopulation", labels = comma)
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank()) +
xlab("") + ylab("")
print(p)
pdf("StudyCountiesMap.pdf", width = 7, height = 3.5)
print(p)
dev.off()
ebola <- read.table("country_timeseries.csv", sep = ",",
header = TRUE)
ebola[1:3, 1:5]
setwd("/Users/brookeanderson/FallRMeetings ")
setwd("/Users/brookeanderson/FallRMeetings")
ebola <- read.table("country_timeseries.csv", sep = ",",
header = TRUE)
ebola[1:3, 1:5]
ebola$Date[1:10]
class.data[1,1]
head(ebola)
?summary
?head
head(ebola)
head(ebola, n = 3)
?plot
colnames(ebola)
ebola$Date
colnames(ebola)
ebola$Cases_UnitedStates[1:10]
ebola[1:10, "Cases_UnitedStates"]
US.ebola <- subset(ebola, !(is.na(Cases_UnitedStates)))
US.ebola[1:10, "Cases_UnitedStates"]
nrow(ebola)
colnames(ebola)
94 - 10
ebola$Deaths_Liberia[85:94]
(nrow(ebola) - 9)
(nrow(ebola)
(nrow(ebola))
(nrow(ebola))
(nrow(ebola) - 9):(nrow(ebola))
(nrow(ebola) - 9)
(nrow(ebola))
(nrow(ebola) - 9):(nrow(ebola))
Mali.ebola <- ebola[1:5, c("Date", "Cases_Mali", "Deaths_Mali")]
Mali.ebola
Mali.ebola <- subset(ebola, !(is.na(Cases_Mali)))
Mali.ebola <- subset(ebola, !(is.na(Cases_Mali)))
Mali.ebola[1:5, c("Date", "Cases_Mali", "Deaths_Mali")]
Mali.ebola
Mali.ebola[ , c("Date", "Cases_Mali", "Deaths_Mali")]
x <- c(1, 2, 3)
y <- c(4, 5, 6)
plot(x, y)
plot(ebola$Day, ebola$Deaths_Liberia)
plot(ebola$Day, ebola$Deaths_Liberia)
plot(ebola$Day, ebola$Deaths_Liberia, type = "l")
ebola.Liberia <- subset(ebola, !(is.na(Cases_Liberia)))
head(ebola.Liberia)
ebola.Liberia <- subset(ebola, !(is.na(Cases_Liberia)),
select = c("Date", "Day", "Cases_Liberia", "Deaths_Liberia"))
head(ebola.Liberia)
plot(ebola.Liberia$Day, ebola.Liberia$Cases_Liberia)
plot(ebola.Liberia$Day, ebola.Liberia$Cases_Liberia,
type = "l", col = "gray")
plot(ebola.Liberia$Day, ebola.Liberia$Cases_Liberia,
type = "l", col = "gray", lwd = 2)
plot(ebola.Liberia$Day, ebola.Liberia$Cases_Liberia,
type = "l", col = "gray", lwd = 2,
xlab = "Day in ebola tracking",
ylab = "Count",
main = "Ebola in Liberia")
lines(ebola.Liberia$Day, ebola.Liberia$Deaths_Liberia)
lines(ebola.Liberia$Day[!is.na(ebola.Liberia$Deaths_Liberia)],
ebola.Liberia$Deaths_Liberia)[!is.na(ebola.Liberia$Deaths_Liberia)])
ebola.Liberia$Day[!is.na(ebola.Liberia$Deaths_Liberia)]
ebola.Liberia$Deaths_Liberia)[!is.na(ebola.Liberia$Deaths_Liberia)]
lines(ebola.Liberia$Day[!is.na(ebola.Liberia$Deaths_Liberia)],
ebola.Liberia$Deaths_Liberia[!is.na(ebola.Liberia$Deaths_Liberia)])
plot(ebola$Day, ebola$Deaths_Liberia / ebola$Cases_Liberia, type = "l")
ebola.Liberia <- subset(ebola, !(is.na(Cases_Liberia)) & !(is.na(Deaths_Liberia)),
select = c("Date", "Day", "Cases_Liberia", "Deaths_Liberia"))
plot(ebola.Liberia$Day, ebola.Liberia$Cases_Liberia,
type = "l", col = "gray", lwd = 2)
## Get a little fancier
plot(ebola.Liberia$Day, ebola.Liberia$Cases_Liberia,
type = "l", col = "gray", lwd = 2,
xlab = "Day in ebola tracking",
ylab = "Count",
main = "Ebola in Liberia")
## Add a line for deaths in Liberia
lines(ebola.Liberia$Day, ebola.Liberia$Deaths_Liberia)  ## check out the lines function, `?lines`
## Plot the percent mortality in Liberia
plot(ebola$Day, ebola$Deaths_Liberia / ebola$Cases_Liberia, type = "l")
perc.mort.Liberia <- ebola.Liberia$Deaths_Liberia / ebola.Liberia$Cases_Liberia
plot(ebola.Liberia$Day, perc.mort.Liberia, type = "l")
plot(ebola.Liberia$Day, perc.mort.Liberia, type = "l",
xlab = "Day in ebola tracking", ylab = "% mortality")
plot(ebola.Liberia$Day, perc.mort.Liberia, type = "l",
xlab = "Day in ebola tracking", ylab = "% mortality",
main = "Ebola fatality rate in Liberia")
class(ebola.Liberia$Date)
head(ebola.Liberia)
ebola.Liberia$Date <- as.character(ebola.Liberia$Date)
ebola.Liberia$Date <- as.Date(ebola.Liberia$Date)
plot(ebola.Liberia$Date, perc.mort.Liberia, type = "l",
xlab = "Date, 2014", ylab = "% mortality",
main = "Ebola fatality rate in Liberia")
ebola.Liberia$Date <- as.Date(ebola.Liberia$Date, format = "%m/%d/%Y")
plot(ebola.Liberia$Date, perc.mort.Liberia, type = "l",
xlab = "Date, 2014", ylab = "% mortality",
main = "Ebola fatality rate in Liberia")
library(ggplot2)
ggplot(ebola.Liberia, aes(x = Date, y = Deaths_Liberia)) + geom_line()
ggplot(ebola.Liberia, aes(x = Date, y = Deaths_Liberia)) + geom_line() +
xlab("Date, 2014") + ylab("Death count")
install.packages('ggthemes', dependencies = TRUE)
library(ggthemes)
p <- ggplot(ebola.Liberia, aes(x = Date, y = Deaths_Liberia)) + geom_line() +
xlab("Date, 2014") + ylab("Death count")
p + theme_tufte()
p + geom_rangeframe() + theme_tufte()
p + theme_economist() + scale_colour_economist()
p + theme_excel() + scale_colour_excel()) ## Looks like Excel
p + theme_excel() + scale_colour_excel() ## Looks like Excel
p + scale_color_fivethirtyeight() + theme_fivethirtyeight() # Looks like Nate Silver's graphs
p + theme_solarized_2() + scale_colour_solarized("blue")
p + theme_solarized() + scale_colour_solarized("blue")
p + theme_tufte()
getwd()
ebola <- read.table("country_timeseries.csv", sep = ",",
header = TRUE)
ebola[1:3, 1:5]
x <- c(1, 5, 7, 9, 10)
x
